package org.apache.commons.numbers.gamma

import org.junit.{Assert, Ignore, Test}
import org.junit.experimental.runners.Enclosed
import org.junit.runner.RunWith
import org.junit.runners.Parameterized
import org.junit.runners.Parameterized.Parameters
import scala.annotation.static
import scala.jdk.javaapi.CollectionConverters

object LogBetaTest {

  @Ignore("Not a test class")
  object TestLogBeta {
    @Parameters
    @static final def parameters(): java.util.Collection[Array[Any]] = CollectionConverters.asJava(List[Array[Any]](
      Array(0.125d, 0.125d, 2.750814190409515d),
      Array(0.125d, 0.25d, 2.444366899981226d),
      Array(0.125d, 0.5d, 2.230953804989556d),
      Array(0.125d, 1.0d, 2.079441541679836d),
      Array(0.125d, 2.0d, 1.961658506023452d),
      Array(0.125d, 3.0d, 1.901033884207018d),
      Array(0.125d, 4.0d, 1.860211889686763d),
      Array(0.125d, 5.0d, 1.829440231020009d),
      Array(0.125d, 6.0d, 1.804747618429637d),
      Array(0.125d, 7.0d, 1.784128331226902d),
      Array(0.125d, 8.0d, 1.766428754127501d),
      Array(0.125d, 9.0d, 1.750924567591535d),
      Array(0.125d, 10.0d, 1.7371312454592d),
      Array(0.125d, 1000.0d, 1.156003642015969d),
      Array(0.125d, 1001.0d, 1.155878649827818d),
      Array(0.125d, 10000.0d, .8681312798751318d),
      Array(0.25d, 0.125d, 2.444366899981226d),
      Array(0.25d, 0.25d, 2.003680106471455d),
      Array(0.25d, 0.5d, 1.657106516191482d),
      Array(0.25d, 1.0d, 1.386294361119891d),
      Array(0.25d, 2.0d, 1.163150809805681d),
      Array(0.25d, 3.0d, 1.045367774149297d),
      Array(0.25d, 4.0d, 0.965325066475761d),
      Array(0.25d, 5.0d, .9047004446593261d),
      Array(0.25d, 6.0d, .8559102804898941d),
      Array(0.25d, 7.0d, 0.815088285969639d),
      Array(0.25d, 8.0d, .7799969661583689d),
      Array(0.25d, 9.0d, .7492253074916152d),
      Array(0.25d, 10.0d, .7218263333035008d),
      Array(0.25d, 1000.0d, -.4388225372378877d),
      Array(0.25d, 1001.0d, -.4390725059930951d),
      Array(0.25d, 10000.0d, -1.014553193217846d),
      Array(0.5d, 0.125d, 2.230953804989556d),
      Array(0.5d, 0.25d, 1.657106516191482d),
      Array(0.5d, 0.5d, 1.1447298858494d),
      Array(0.5d, 1.0d, .6931471805599453d),
      Array(0.5d, 2.0d, .2876820724517809d),
      Array(0.5d, 3.0d, .06453852113757118d),
      //Array(0.5d, 4.0d, -.08961215868968714d),
      Array(0.5d, 5.0d, -.2073951943460706d),
      Array(0.5d, 6.0d, -.3027053741503954d),
      Array(0.5d, 7.0d, -.3827480818239319d),
      Array(0.5d, 8.0d, -.4517409533108833d),
      Array(0.5d, 9.0d, -.5123655751273182d),
      Array(0.5d, 10.0d, -.5664327963975939d),
      Array(0.5d, 1000.0d, -2.881387696571577d),
      Array(0.5d, 1001.0d, -2.881887571613228d),
      Array(0.5d, 10000.0d, -4.032792743063396d),
      Array(1.0d, 0.125d, 2.079441541679836d),
      Array(1.0d, 0.25d, 1.386294361119891d),
      Array(1.0d, 0.5d, .6931471805599453d),
      Array(1.0d, 1.0d, 0.0d),
      Array(1.0d, 2.0d, -.6931471805599453d),
      Array(1.0d, 3.0d, -1.09861228866811d),
      Array(1.0d, 4.0d, -1.386294361119891d),
      Array(1.0d, 5.0d, -1.6094379124341d),
      Array(1.0d, 6.0d, -1.791759469228055d),
      Array(1.0d, 7.0d, -1.945910149055313d),
      Array(1.0d, 8.0d, -2.079441541679836d),
      Array(1.0d, 9.0d, -2.19722457733622d),
      Array(1.0d, 10.0d, -2.302585092994046d),
      Array(1.0d, 1000.0d, -6.907755278982137d),
      Array(1.0d, 1001.0d, -6.90875477931522d),
      Array(1.0d, 10000.0d, -9.210340371976184d),
      Array(2.0d, 0.125d, 1.961658506023452d),
      Array(2.0d, 0.25d, 1.163150809805681d),
      Array(2.0d, 0.5d, .2876820724517809d),
      Array(2.0d, 1.0d, -.6931471805599453d),
      Array(2.0d, 2.0d, -1.791759469228055d),
      Array(2.0d, 3.0d, -2.484906649788d),
      Array(2.0d, 4.0d, -2.995732273553991d),
      Array(2.0d, 5.0d, -3.401197381662155d),
      Array(2.0d, 6.0d, -3.737669618283368d),
      Array(2.0d, 7.0d, -4.02535169073515d),
      Array(2.0d, 8.0d, -4.276666119016055d),
      Array(2.0d, 9.0d, -4.499809670330265d),
      Array(2.0d, 10.0d, -4.700480365792417d),
      Array(2.0d, 1000.0d, -13.81651005829736d),
      Array(2.0d, 1001.0d, -13.81850806096003d),
      Array(2.0d, 10000.0d, -18.4207807389527d),
      Array(3.0d, 0.125d, 1.901033884207018d),
      Array(3.0d, 0.25d, 1.045367774149297d),
      Array(3.0d, 0.5d, .06453852113757118d),
      Array(3.0d, 1.0d, -1.09861228866811d),
      Array(3.0d, 2.0d, -2.484906649788d),
      Array(3.0d, 3.0d, -3.401197381662155d),
      Array(3.0d, 4.0d, -4.0943445622221d),
      Array(3.0d, 5.0d, -4.653960350157523d),
      Array(3.0d, 6.0d, -5.123963979403259d),
      Array(3.0d, 7.0d, -5.529429087511423d),
      Array(3.0d, 8.0d, -5.886104031450156d),
      Array(3.0d, 9.0d, -6.20455776256869d),
      Array(3.0d, 10.0d, -6.492239835020471d),
      Array(3.0d, 1000.0d, -20.03311615938222d),
      Array(3.0d, 1001.0d, -20.03611166836202d),
      Array(3.0d, 10000.0d, -26.9381739103716d),
      Array(4.0d, 0.125d, 1.860211889686763d),
      Array(4.0d, 0.25d, 0.965325066475761d),
      //Array(4.0d, 0.5d, -.08961215868968714d),
      Array(4.0d, 1.0d, -1.386294361119891d),
      Array(4.0d, 2.0d, -2.995732273553991d),
      Array(4.0d, 3.0d, -4.0943445622221d),
      Array(4.0d, 4.0d, -4.941642422609304d),
      Array(4.0d, 5.0d, -5.634789603169249d),
      Array(4.0d, 6.0d, -6.222576268071369d),
      Array(4.0d, 7.0d, -6.733401891837359d),
      Array(4.0d, 8.0d, -7.185387015580416d),
      Array(4.0d, 9.0d, -7.590852123688581d),
      Array(4.0d, 10.0d, -7.958576903813898d),
      Array(4.0d, 1000.0d, -25.84525465867605d),
      Array(4.0d, 1001.0d, -25.84924667994559d),
      Array(4.0d, 10000.0d, -35.05020194868867d),
      Array(5.0d, 0.125d, 1.829440231020009d),
      Array(5.0d, 0.25d, .9047004446593261d),
      Array(5.0d, 0.5d, -.2073951943460706d),
      Array(5.0d, 1.0d, -1.6094379124341d),
      Array(5.0d, 2.0d, -3.401197381662155d),
      Array(5.0d, 3.0d, -4.653960350157523d),
      Array(5.0d, 4.0d, -5.634789603169249d),
      Array(5.0d, 5.0d, -6.445719819385578d),
      Array(5.0d, 6.0d, -7.138866999945524d),
      Array(5.0d, 7.0d, -7.745002803515839d),
      Array(5.0d, 8.0d, -8.283999304248526d),
      Array(5.0d, 9.0d, -8.769507120030227d),
      Array(5.0d, 10.0d, -9.211339872309265d),
      Array(5.0d, 1000.0d, -31.37070759780783d),
      Array(5.0d, 1001.0d, -31.37569513931887d),
      Array(5.0d, 10000.0d, -42.87464787956629d),
      Array(6.0d, 0.125d, 1.804747618429637d),
      Array(6.0d, 0.25d, .8559102804898941d),
      Array(6.0d, 0.5d, -.3027053741503954d),
      Array(6.0d, 1.0d, -1.791759469228055d),
      Array(6.0d, 2.0d, -3.737669618283368d),
      Array(6.0d, 3.0d, -5.123963979403259d),
      Array(6.0d, 4.0d, -6.222576268071369d),
      Array(6.0d, 5.0d, -7.138866999945524d),
      Array(6.0d, 6.0d, -7.927324360309794d),
      Array(6.0d, 7.0d, -8.620471540869739d),
      Array(6.0d, 8.0d, -9.239510749275963d),
      Array(6.0d, 9.0d, -9.799126537211386d),
      Array(6.0d, 10.0d, -10.30995216097738d),
      Array(6.0d, 1000.0d, -36.67401250586691d),
      Array(6.0d, 1001.0d, -36.67999457754446d),
      Array(6.0d, 10000.0d, -50.47605021415003d),
      Array(7.0d, 0.125d, 1.784128331226902d),
      Array(7.0d, 0.25d, 0.815088285969639d),
      Array(7.0d, 0.5d, -.3827480818239319d),
      Array(7.0d, 1.0d, -1.945910149055313d),
      Array(7.0d, 2.0d, -4.02535169073515d),
      Array(7.0d, 3.0d, -5.529429087511423d),
      Array(7.0d, 4.0d, -6.733401891837359d),
      Array(7.0d, 5.0d, -7.745002803515839d),
      Array(7.0d, 6.0d, -8.620471540869739d),
      Array(7.0d, 7.0d, -9.39366142910322d),
      Array(7.0d, 8.0d, -10.08680860966317d),
      Array(7.0d, 9.0d, -10.71541726908554d),
      Array(7.0d, 10.0d, -11.2907814139891d),
      Array(7.0d, 1000.0d, -41.79599038729854d),
      Array(7.0d, 1001.0d, -41.80296600103496d),
      Array(7.0d, 10000.0d, -57.89523093697012d),
      Array(8.0d, 0.125d, 1.766428754127501d),
      Array(8.0d, 0.25d, .7799969661583689d),
      Array(8.0d, 0.5d, -.4517409533108833d),
      Array(8.0d, 1.0d, -2.079441541679836d),
      Array(8.0d, 2.0d, -4.276666119016055d),
      Array(8.0d, 3.0d, -5.886104031450156d),
      Array(8.0d, 4.0d, -7.185387015580416d),
      Array(8.0d, 5.0d, -8.283999304248526d),
      Array(8.0d, 6.0d, -9.239510749275963d),
      Array(8.0d, 7.0d, -10.08680860966317d),
      Array(8.0d, 8.0d, -10.84894866171006d),
      Array(8.0d, 9.0d, -11.54209584227001d),
      Array(8.0d, 10.0d, -12.17808460899001d),
      Array(8.0d, 1000.0d, -46.76481113096179d),
      Array(8.0d, 1001.0d, -46.77277930061096d),
      Array(8.0d, 10000.0d, -65.16036091500527d),
      Array(9.0d, 0.125d, 1.750924567591535d),
      Array(9.0d, 0.25d, .7492253074916152d),
      Array(9.0d, 0.5d, -.5123655751273182d),
      Array(9.0d, 1.0d, -2.19722457733622d),
      Array(9.0d, 2.0d, -4.499809670330265d),
      Array(9.0d, 3.0d, -6.20455776256869d),
      Array(9.0d, 4.0d, -7.590852123688581d),
      Array(9.0d, 5.0d, -8.769507120030227d),
      Array(9.0d, 6.0d, -9.799126537211386d),
      Array(9.0d, 7.0d, -10.71541726908554d),
      Array(9.0d, 8.0d, -11.54209584227001d),
      Array(9.0d, 9.0d, -12.29586764464639d),
      Array(9.0d, 10.0d, -12.98901482520633d),
      Array(9.0d, 1000.0d, -51.60109303791327d),
      Array(9.0d, 1001.0d, -51.61005277928474d),
      Array(9.0d, 10000.0d, -72.29205942547217d),
      Array(10.0d, 0.125d, 1.7371312454592d),
      Array(10.0d, 0.25d, .7218263333035008d),
      Array(10.0d, 0.5d, -.5664327963975939d),
      Array(10.0d, 1.0d, -2.302585092994046d),
      Array(10.0d, 2.0d, -4.700480365792417d),
      Array(10.0d, 3.0d, -6.492239835020471d),
      Array(10.0d, 4.0d, -7.958576903813898d),
      Array(10.0d, 5.0d, -9.211339872309265d),
      Array(10.0d, 6.0d, -10.30995216097738d),
      Array(10.0d, 7.0d, -11.2907814139891d),
      Array(10.0d, 8.0d, -12.17808460899001d),
      Array(10.0d, 9.0d, -12.98901482520633d),
      Array(10.0d, 10.0d, -13.73622922703655d),
      Array(10.0d, 1000.0d, -56.32058348093065d),
      Array(10.0d, 1001.0d, -56.33053381178382d),
      Array(10.0d, 10000.0d, -79.30607481535498d),
      Array(1000.0d, 0.125d, 1.156003642015969d),
      Array(1000.0d, 0.25d, -.4388225372378877d),
      Array(1000.0d, 0.5d, -2.881387696571577d),
      Array(1000.0d, 1.0d, -6.907755278982137d),
      Array(1000.0d, 2.0d, -13.81651005829736d),
      Array(1000.0d, 3.0d, -20.03311615938222d),
      Array(1000.0d, 4.0d, -25.84525465867605d),
      Array(1000.0d, 5.0d, -31.37070759780783d),
      Array(1000.0d, 6.0d, -36.67401250586691d),
      Array(1000.0d, 7.0d, -41.79599038729854d),
      Array(1000.0d, 8.0d, -46.76481113096179d),
      Array(1000.0d, 9.0d, -51.60109303791327d),
      Array(1000.0d, 10.0d, -56.32058348093065d),
      Array(1000.0d, 1000.0d, -1388.482601635902d),
      Array(1000.0d, 1001.0d, -1389.175748816462d),
      Array(1000.0d, 10000.0d, -3353.484270767097d),
      Array(1001.0d, 0.125d, 1.155878649827818d),
      Array(1001.0d, 0.25d, -.4390725059930951d),
      Array(1001.0d, 0.5d, -2.881887571613228d),
      Array(1001.0d, 1.0d, -6.90875477931522d),
      Array(1001.0d, 2.0d, -13.81850806096003d),
      Array(1001.0d, 3.0d, -20.03611166836202d),
      Array(1001.0d, 4.0d, -25.84924667994559d),
      Array(1001.0d, 5.0d, -31.37569513931887d),
      Array(1001.0d, 6.0d, -36.67999457754446d),
      Array(1001.0d, 7.0d, -41.80296600103496d),
      Array(1001.0d, 8.0d, -46.77277930061096d),
      Array(1001.0d, 9.0d, -51.61005277928474d),
      Array(1001.0d, 10.0d, -56.33053381178382d),
      Array(1001.0d, 1000.0d, -1389.175748816462d),
      Array(1001.0d, 1001.0d, -1389.869395872064d),
      Array(1001.0d, 10000.0d, -3355.882166039895d),
      Array(10000.0d, 0.125d, .8681312798751318d),
      Array(10000.0d, 0.25d, -1.014553193217846d),
      Array(10000.0d, 0.5d, -4.032792743063396d),
      Array(10000.0d, 1.0d, -9.210340371976184d),
      Array(10000.0d, 2.0d, -18.4207807389527d),
      Array(10000.0d, 3.0d, -26.9381739103716d),
      Array(10000.0d, 4.0d, -35.05020194868867d),
      Array(10000.0d, 5.0d, -42.87464787956629d),
      Array(10000.0d, 6.0d, -50.47605021415003d),
      Array(10000.0d, 7.0d, -57.89523093697012d),
      Array(10000.0d, 8.0d, -65.16036091500527d),
      Array(10000.0d, 9.0d, -72.29205942547217d),
      Array(10000.0d, 10.0d, -79.30607481535498d),
      Array(10000.0d, 1000.0d, -3353.484270767097d),
      Array(10000.0d, 1001.0d, -3355.882166039895d),
      Array(10000.0d, 10000.0d, -13866.28325676141d),
    ))
  }

  private def testLogBeta(expected: Double, a: Double, b: Double): Unit = {
    val ulps = 3
    val actual = LogBeta.value(a, b)
    val tol = ulps * Math.ulp(expected)
    Assert.assertEquals(expected, actual, tol)
  }

  @RunWith(classOf[Parameterized])
  @static class TestLogBeta(a: Double, b: Double, expected: Double) {
    @Test def testLogBeta(): Unit = {
      LogBetaTest.testLogBeta(expected, a, b)
    }
  }

  @Test def testLogBetaNanPositive(): Unit = {
    testLogBeta(Double.NaN, Double.NaN, 2)
  }

  @Test def testLogBetaPositiveNan(): Unit = {
    testLogBeta(Double.NaN, 1, Double.NaN)
  }

  @Test def testLogBetaNegativePositive(): Unit = {
    testLogBeta(Double.NaN, -1, 2)
  }

  @Test def testLogBetaPositiveNegative(): Unit = {
    testLogBeta(Double.NaN, 1, -2)
  }

  @Test def testLogBetaZeroPositive(): Unit = {
    testLogBeta(Double.NaN, 0, 2)
  }

  @Test def testLogBetaPositiveZero(): Unit = {
    testLogBeta(Double.NaN, 1, 0)
  }

  @Test def testLogBetaPositivePositive(): Unit = {
    testLogBeta(-0.693147180559945, 1, 2)
  }

}

@RunWith(classOf[Enclosed])
class LogBetaTest
